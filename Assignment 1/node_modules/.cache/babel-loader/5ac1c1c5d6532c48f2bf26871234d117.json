{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nimport { CameraResultType, CameraSource, FilesystemDirectory } from \"@capacitor/core\";\nconst PHOTO_STORAGE = \"photos\";\nexport function usePhotoGallery(tripName, suitcaseName) {\n  let identifier = tripName + \"_\" + suitcaseName;\n  const {\n    getPhoto\n  } = useCamera();\n  const [photos, setPhotos] = useState([]);\n  const {\n    deleteFile,\n    getUri,\n    readFile,\n    writeFile\n  } = useFilesystem();\n  const {\n    get,\n    set\n  } = useStorage();\n  useEffect(() => {\n    const loadSaved = async () => {\n      // set(PHOTO_STORAGE, \"\");\n      const photosString = await get(PHOTO_STORAGE);\n      const photos = photosString ? JSON.parse(photosString) : [];\n      let toReturnPhotos = [];\n\n      if (photos.length) {\n        for (let photo of photos) {\n          if (photo.filepath.includes(identifier) && !identifier.includes(\"Loading...\")) {\n            const file = await readFile({\n              path: photo.filepath,\n              directory: FilesystemDirectory.Data\n            });\n            photo.base64 = `data:image/jpeg;base64,${file.data}`;\n            toReturnPhotos.push(photo);\n          }\n        }\n      }\n\n      setPhotos(toReturnPhotos);\n    };\n\n    loadSaved();\n  }, [get, readFile, identifier]);\n\n  const takePhoto = async () => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + \"-\" + identifier + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    setPhotos(newPhotos);\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos.map(p => {\n      // Don't save the base64 representation of the photo data,\n      // since it's already saved on the Filesystem\n      const photoCopy = { ...p\n      };\n      delete photoCopy.base64;\n      return photoCopy;\n    }))); // eslint-disable-next-line no-restricted-globals\n    // location.reload();\n\n    return savedFileImage;\n  };\n\n  const savePicture = async (photo, fileName) => {\n    const base64Data = await base64FromPath(photo.webPath);\n    const savedFile = await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    }); // Get Computer Vision terms here\n    // Use webPath to display the new image instead of base64 since it's\n    // already loaded into memory\n\n    return {\n      filepath: fileName,\n      webviewPath: photo.webPath,\n      identifier: identifier,\n      description: \"unnamed\" //Set Computer Vision term here\n\n    };\n  };\n\n  const deletePhoto = async photo => {\n    // Remove this photo from the Photos reference data array\n    const newPhotos = photos.filter(p => p.filepath !== photo.filepath); // Update photos array cache by overwriting the existing photo array\n\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos)); // delete photo file from filesystem\n\n    const filename = photo.filepath.substr(photo.filepath.lastIndexOf('/') + 1);\n    await deleteFile({\n      path: filename,\n      directory: FilesystemDirectory.Data\n    });\n    setPhotos(newPhotos);\n  };\n\n  return {\n    deletePhoto,\n    photos,\n    takePhoto\n  };\n}","map":{"version":3,"sources":["/Users/ahadyboy/Desktop/Tha Boy/UNI/2020 - UNI/SWEN325/Assignment 1/Packit/src/functions/usePhotoGallery.ts"],"names":["useState","useEffect","useCamera","useFilesystem","base64FromPath","useStorage","CameraResultType","CameraSource","FilesystemDirectory","PHOTO_STORAGE","usePhotoGallery","tripName","suitcaseName","identifier","getPhoto","photos","setPhotos","deleteFile","getUri","readFile","writeFile","get","set","loadSaved","photosString","JSON","parse","toReturnPhotos","length","photo","filepath","includes","file","path","directory","Data","base64","data","push","takePhoto","cameraPhoto","resultType","Uri","source","Camera","quality","fileName","Date","getTime","savedFileImage","savePicture","newPhotos","stringify","map","p","photoCopy","base64Data","webPath","savedFile","webviewPath","description","deletePhoto","filter","filename","substr","lastIndexOf"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nimport { isPlatform } from '@ionic/react';\nimport { CameraResultType, CameraSource, CameraPhoto, Capacitor, FilesystemDirectory } from \"@capacitor/core\";\n\nconst PHOTO_STORAGE = \"photos\";\n\nexport function usePhotoGallery(tripName: string, suitcaseName: string) {\n\n  let identifier:string = tripName + \"_\" + suitcaseName;\n\n  const { getPhoto } = useCamera();\n  const [photos, setPhotos] = useState<Photo[]>([]);\n  const { deleteFile, getUri, readFile, writeFile } = useFilesystem();\n  const { get, set } = useStorage();\n\n  useEffect(() => {\n    const loadSaved = async () => {\n\n      // set(PHOTO_STORAGE, \"\");\n\n      const photosString = await get(PHOTO_STORAGE);\n      const photos = (photosString ? JSON.parse(photosString) : []) as Photo[];\n      let toReturnPhotos: Photo[] = [];\n      if (photos.length) {\n        for (let photo of photos) {\n          if (photo.filepath.includes(identifier) && !(identifier.includes(\"Loading...\"))) {\n            const file = await readFile({\n              path: photo.filepath,\n              directory: FilesystemDirectory.Data\n            });\n            photo.base64 = `data:image/jpeg;base64,${file.data}`;\n            toReturnPhotos.push(photo);\n          }\n\n        }\n      }\n      setPhotos(toReturnPhotos);\n    };\n    loadSaved();\n  }, [get, readFile, identifier]);\n\n  const takePhoto = async (): Promise<Photo> => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + \"-\" + identifier + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    setPhotos(newPhotos);\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos.map(p => {\n      // Don't save the base64 representation of the photo data,\n      // since it's already saved on the Filesystem\n      const photoCopy = { ...p };\n      delete photoCopy.base64;\n      return photoCopy;\n    })));\n    // eslint-disable-next-line no-restricted-globals\n    // location.reload();\n    return savedFileImage;\n  };\n\n  const savePicture = async (photo: CameraPhoto, fileName: string): Promise<Photo> => {\n    const base64Data = await base64FromPath(photo.webPath!);\n    const savedFile = await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    });\n\n    // Get Computer Vision terms here\n\n    // Use webPath to display the new image instead of base64 since it's\n    // already loaded into memory\n    return {\n      filepath: fileName,\n      webviewPath: photo.webPath,\n      identifier: identifier,\n      description: \"unnamed\", //Set Computer Vision term here\n    };\n  };\n\n\n  const deletePhoto = async (photo: Photo) => {\n    // Remove this photo from the Photos reference data array\n    const newPhotos = photos.filter(p => p.filepath !== photo.filepath);\n\n    // Update photos array cache by overwriting the existing photo array\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos));\n\n    // delete photo file from filesystem\n    const filename = photo.filepath.substr(photo.filepath.lastIndexOf('/') + 1);\n    await deleteFile({\n      path: filename,\n      directory: FilesystemDirectory.Data\n    });\n    setPhotos(newPhotos);\n  };\n\n  return {\n    deletePhoto,\n    photos,\n    takePhoto\n  };\n}\n\n\nexport interface Photo {\n  filepath: string;\n  webviewPath?: string;\n  base64?: string;\n  identifier: string;\n  description?: string;\n}"]},"metadata":{},"sourceType":"module"}