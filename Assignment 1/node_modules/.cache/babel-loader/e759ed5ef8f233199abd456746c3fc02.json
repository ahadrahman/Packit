{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nimport { CameraResultType, CameraSource, FilesystemDirectory } from \"@capacitor/core\";\nconst PHOTO_STORAGE = \"photos\";\nexport function usePhotoGallery(tripName, suitcaseName) {\n  let identifier = tripName + \"_\" + suitcaseName;\n  const {\n    getPhoto\n  } = useCamera();\n  const [photos, setPhotos] = useState([]);\n  const {\n    deleteFile,\n    getUri,\n    readFile,\n    writeFile\n  } = useFilesystem();\n  const {\n    get,\n    set\n  } = useStorage();\n  useEffect(() => {\n    const loadSaved = async () => {\n      const photosString = await get(PHOTO_STORAGE);\n      const photos = photosString ? JSON.parse(photosString) : [];\n\n      for (let photo of photos) {\n        if (photo.filepath.includes(identifier)) {\n          const file = await readFile({\n            path: photo.filepath,\n            directory: FilesystemDirectory.Data\n          });\n          photo.base64 = `data:image/jpeg;base64,${file.data}`;\n        }\n      }\n\n      setPhotos(photos);\n    };\n\n    loadSaved();\n  }, [get, readFile]);\n\n  const takePhoto = async () => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + \"-\" + identifier + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    setPhotos(newPhotos);\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos.map(p => {\n      // Don't save the base64 representation of the photo data,\n      // since it's already saved on the Filesystem\n      const photoCopy = { ...p\n      };\n      delete photoCopy.base64;\n      return photoCopy;\n    })));\n  };\n\n  const savePicture = async (photo, fileName) => {\n    const base64Data = await base64FromPath(photo.webPath);\n    const savedFile = await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    }); // Use webPath to display the new image instead of base64 since it's\n    // already loaded into memory\n\n    return {\n      filepath: fileName,\n      webviewPath: photo.webPath,\n      identifier: identifier\n    };\n  };\n\n  return {\n    photos,\n    takePhoto\n  };\n}","map":{"version":3,"sources":["/Users/ahadyboy/Desktop/Tha Boy/UNI/2020 - UNI/SWEN325/Assignment 1/Packit/src/usePhotoGallery.ts"],"names":["useState","useEffect","useCamera","useFilesystem","base64FromPath","useStorage","CameraResultType","CameraSource","FilesystemDirectory","PHOTO_STORAGE","usePhotoGallery","tripName","suitcaseName","identifier","getPhoto","photos","setPhotos","deleteFile","getUri","readFile","writeFile","get","set","loadSaved","photosString","JSON","parse","photo","filepath","includes","file","path","directory","Data","base64","data","takePhoto","cameraPhoto","resultType","Uri","source","Camera","quality","fileName","Date","getTime","savedFileImage","savePicture","newPhotos","stringify","map","p","photoCopy","base64Data","webPath","savedFile","webviewPath"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nimport { isPlatform } from '@ionic/react';\nimport { CameraResultType, CameraSource, CameraPhoto, Capacitor, FilesystemDirectory } from \"@capacitor/core\";\nimport Trip from \"./classes/Trip\";\nimport Suitcase from \"./classes/Suitcase\";\n\nconst PHOTO_STORAGE = \"photos\";\n\nexport function usePhotoGallery(tripName: string, suitcaseName: string) {\n\n  let identifier = tripName + \"_\" + suitcaseName;\n\n  const { getPhoto } = useCamera();\n  const [photos, setPhotos] = useState<Photo[]>([]);\n  const { deleteFile, getUri, readFile, writeFile } = useFilesystem();\n  const { get, set } = useStorage();\n\n  useEffect(() => {\n    const loadSaved = async () => {\n      const photosString = await get(PHOTO_STORAGE);\n      const photos = (photosString ? JSON.parse(photosString) : []) as Photo[];\n      for (let photo of photos) {\n        if (photo.filepath.includes(identifier)) {\n        const file = await readFile({\n          path: photo.filepath,\n          directory: FilesystemDirectory.Data\n        });\n        photo.base64 = `data:image/jpeg;base64,${file.data}`;\n        }\n      }\n      setPhotos(photos);\n    };\n    loadSaved();\n  }, [get, readFile]);\n\n  const takePhoto = async () => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + \"-\" + identifier + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    setPhotos(newPhotos);\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos.map(p => {\n      // Don't save the base64 representation of the photo data,\n      // since it's already saved on the Filesystem\n      const photoCopy = { ...p };\n      delete photoCopy.base64;\n      return photoCopy;\n    })));\n  };\n\n  const savePicture = async (photo: CameraPhoto, fileName: string): Promise<Photo> => {\n    const base64Data = await base64FromPath(photo.webPath!);\n    const savedFile = await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    });\n\n\n    // Use webPath to display the new image instead of base64 since it's\n    // already loaded into memory\n    return {\n      filepath: fileName,\n      webviewPath: photo.webPath,\n      identifier: identifier,\n    };\n  };\n\n  return {\n    photos,\n    takePhoto\n  };\n}\n\n\nexport interface Photo {\n  filepath: string;\n  webviewPath?: string;\n  base64?: string;\n  identifier: string;\n}"]},"metadata":{},"sourceType":"module"}