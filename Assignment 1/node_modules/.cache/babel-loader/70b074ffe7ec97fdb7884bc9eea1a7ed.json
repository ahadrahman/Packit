{"ast":null,"code":"import { COMPUTER_VISION_SUBSCRIPTION_KEY, COMPUTER_VISION_ENDPOINT } from \"./credentials\";\n\nconst async = require('async');\n\nconst fs = require('fs');\n\nconst https = require('https');\n\nconst path = require(\"path\");\n\nconst createReadStream = require('fs').createReadStream;\n\nconst sleep = require('util').promisify(setTimeout);\n\nconst ComputerVisionClient = require('@azure/cognitiveservices-computervision').ComputerVisionClient;\n\nconst ApiKeyCredentials = require('@azure/ms-rest-js').ApiKeyCredentials;\n\nexport function computerVision(photo) {\n  async.series([async function () {\n    const computerVisionClient = new ComputerVisionClient(new ApiKeyCredentials({\n      inHeader: {\n        'Ocp-Apim-Subscription-Key': COMPUTER_VISION_SUBSCRIPTION_KEY\n      }\n    }), COMPUTER_VISION_ENDPOINT);\n\n    if (photo.base64) {\n      const describeURL = makeBlob(photo.base64); //image url goes here\n      // const describeURL = \"\";\n\n      console.log(photo.base64);\n\n      if (describeURL !== undefined) {\n        // Analyze URL image\n        console.log('Analyzing URL image to describe...', describeURL.split('/').pop());\n        const caption = (await computerVisionClient.describeImage(describeURL)).captions[0];\n        console.log(`This may be ${caption.text} (${caption.confidence.toFixed(2)} confidence)`);\n      }\n    }\n  }, function () {\n    return new Promise(resolve => {\n      resolve();\n    });\n  }], err => {\n    throw err;\n  });\n}\n\nfunction makeBlob(dataURL) {\n  var BASE64_MARKER = ';base64,';\n\n  if (dataURL.indexOf(BASE64_MARKER) == -1) {\n    var parts = dataURL.split(',');\n    var contentType = parts[0].split(':')[1];\n    var raw = decodeURIComponent(parts[1]);\n    return new Blob([raw], {\n      type: contentType\n    });\n  }\n\n  var parts = dataURL.split(BASE64_MARKER);\n  var contentType = parts[0].split(':')[1];\n  var raw = window.atob(parts[1]);\n  var rawLength = raw.length;\n  var uInt8Array = new Uint8Array(rawLength);\n\n  for (var i = 0; i < rawLength; ++i) {\n    uInt8Array[i] = raw.charCodeAt(i);\n  }\n\n  return new Blob([uInt8Array], {\n    type: contentType\n  });\n} // computerVision();","map":{"version":3,"sources":["/Users/ahadyboy/Desktop/Tha Boy/UNI/2020 - UNI/SWEN325/Assignment 1/Packit/src/analyseImage.ts"],"names":["COMPUTER_VISION_SUBSCRIPTION_KEY","COMPUTER_VISION_ENDPOINT","async","require","fs","https","path","createReadStream","sleep","promisify","setTimeout","ComputerVisionClient","ApiKeyCredentials","computerVision","photo","series","computerVisionClient","inHeader","base64","describeURL","makeBlob","console","log","undefined","split","pop","caption","describeImage","captions","text","confidence","toFixed","Promise","resolve","err","dataURL","BASE64_MARKER","indexOf","parts","contentType","raw","decodeURIComponent","Blob","type","window","atob","rawLength","length","uInt8Array","Uint8Array","i","charCodeAt"],"mappings":"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","sourcesContent":["import { COMPUTER_VISION_SUBSCRIPTION_KEY, COMPUTER_VISION_ENDPOINT} from \"./credentials\";\nimport {Photo} from \"./usePhotoGallery\";\n\nconst async = require('async');\nconst fs = require('fs');\nconst https = require('https');\nconst path = require(\"path\");\nconst createReadStream = require('fs').createReadStream;\nconst sleep = require('util').promisify(setTimeout);\nconst ComputerVisionClient = require('@azure/cognitiveservices-computervision').ComputerVisionClient;\nconst ApiKeyCredentials = require('@azure/ms-rest-js').ApiKeyCredentials;\n\nexport function computerVision(photo: Photo) {\n  async.series([\n    async function () {\n      const computerVisionClient = new ComputerVisionClient(\n        new ApiKeyCredentials({ inHeader: { 'Ocp-Apim-Subscription-Key': COMPUTER_VISION_SUBSCRIPTION_KEY } }), COMPUTER_VISION_ENDPOINT);\n      if (photo.base64) {\n        const describeURL = makeBlob(photo.base64); //image url goes here\n        // const describeURL = \"\";\n        console.log(photo.base64);\n\n        if (describeURL !== undefined) {\n          // Analyze URL image\n          console.log('Analyzing URL image to describe...', describeURL.split('/').pop());\n          const caption = (await computerVisionClient.describeImage(describeURL)).captions[0];\n          console.log(`This may be ${caption.text} (${caption.confidence.toFixed(2)} confidence)`);\n        }\n      }\n\n    },\n    function () {\n      return new Promise((resolve) => {\n        resolve();\n      })\n    }\n  ], (err: any) => {\n    throw (err);\n  });\n}\n\nfunction makeBlob(dataURL: string) {\n  var BASE64_MARKER = ';base64,';\n  if (dataURL.indexOf(BASE64_MARKER) == -1) {\n    var parts = dataURL.split(',');\n    var contentType = parts[0].split(':')[1];\n    var raw = decodeURIComponent(parts[1]);\n    return new Blob([raw], { type: contentType });\n  }\n  var parts = dataURL.split(BASE64_MARKER);\n  var contentType = parts[0].split(':')[1];\n  var raw = window.atob(parts[1]);\n  var rawLength = raw.length;\n\n  var uInt8Array = new Uint8Array(rawLength);\n\n  for (var i = 0; i < rawLength; ++i) {\n    uInt8Array[i] = raw.charCodeAt(i);\n  }\n\n  return new Blob([uInt8Array], { type: contentType });\n}\n\n// computerVision();"]},"metadata":{},"sourceType":"module"}