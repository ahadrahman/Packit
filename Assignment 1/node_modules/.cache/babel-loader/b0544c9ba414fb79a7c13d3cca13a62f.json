{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nimport { CameraResultType, CameraSource, FilesystemDirectory } from \"@capacitor/core\";\nconst PHOTO_STORAGE = \"photos\";\nexport function usePhotoGallery(tripName, suitcaseName) {\n  let identifier = tripName + \"_\" + suitcaseName;\n  const {\n    getPhoto\n  } = useCamera();\n  const [photos, setPhotos] = useState([]);\n  const {\n    deleteFile,\n    getUri,\n    readFile,\n    writeFile\n  } = useFilesystem();\n  const {\n    get,\n    set\n  } = useStorage();\n\n  const takePhoto = async () => {\n    console.log(\"here\");\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + \"-\" + identifier + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    setPhotos(newPhotos);\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos.map(p => {\n      // Don't save the base64 representation of the photo data,\n      // since it's already saved on the Filesystem\n      const photoCopy = { ...p\n      };\n      delete photoCopy.base64;\n      return photoCopy;\n    })));\n  };\n\n  useEffect(() => {\n    const loadSaved = async () => {\n      // set(PHOTO_STORAGE, \"\");\n      console.log(FilesystemDirectory);\n      const photosString = await get(PHOTO_STORAGE);\n      console.log(photosString);\n      const photos = photosString ? JSON.parse(photosString) : [];\n      let toReturnPhotos = [];\n\n      if (photos.length) {\n        for (let photo of photos) {\n          if (photo.filepath.includes(identifier) && !identifier.includes(\"Loading...\")) {\n            const file = await readFile({\n              path: photo.filepath,\n              directory: FilesystemDirectory.Data\n            });\n            photo.base64 = `data:image/jpeg;base64,${file.data}`;\n            toReturnPhotos.push(photo);\n          } else {// deletePhoto(photo);\n          }\n\n          console.log(photo.filepath);\n        }\n      }\n\n      setPhotos(toReturnPhotos);\n    };\n\n    loadSaved();\n  }, [get, readFile, identifier, takePhoto]);\n\n  const savePicture = async (photo, fileName) => {\n    const base64Data = await base64FromPath(photo.webPath);\n    const savedFile = await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    }); // Use webPath to display the new image instead of base64 since it's\n    // already loaded into memory\n\n    return {\n      filepath: fileName,\n      webviewPath: photo.webPath,\n      identifier: identifier\n    };\n  };\n\n  const deletePhoto = async photo => {\n    // Remove this photo from the Photos reference data array\n    const newPhotos = photos.filter(p => p.filepath !== photo.filepath); // Update photos array cache by overwriting the existing photo array\n\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos)); // delete photo file from filesystem\n\n    const filename = photo.filepath.substr(photo.filepath.lastIndexOf('/') + 1);\n    await deleteFile({\n      path: filename,\n      directory: FilesystemDirectory.Data\n    });\n    setPhotos(newPhotos);\n  };\n\n  return {\n    deletePhoto,\n    photos,\n    takePhoto\n  };\n}","map":{"version":3,"sources":["/Users/ahadyboy/Desktop/Tha Boy/UNI/2020 - UNI/SWEN325/Assignment 1/Packit/src/usePhotoGallery.ts"],"names":["useState","useEffect","useCamera","useFilesystem","base64FromPath","useStorage","CameraResultType","CameraSource","FilesystemDirectory","PHOTO_STORAGE","usePhotoGallery","tripName","suitcaseName","identifier","getPhoto","photos","setPhotos","deleteFile","getUri","readFile","writeFile","get","set","takePhoto","console","log","cameraPhoto","resultType","Uri","source","Camera","quality","fileName","Date","getTime","savedFileImage","savePicture","newPhotos","JSON","stringify","map","p","photoCopy","base64","loadSaved","photosString","parse","toReturnPhotos","length","photo","filepath","includes","file","path","directory","Data","data","push","base64Data","webPath","savedFile","webviewPath","deletePhoto","filter","filename","substr","lastIndexOf"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,+BAA9C;AACA,SAASC,UAAT,QAA2B,4BAA3B;AAEA,SAASC,gBAAT,EAA2BC,YAA3B,EAAiEC,mBAAjE,QAA4F,iBAA5F;AAEA,MAAMC,aAAa,GAAG,QAAtB;AAEA,OAAO,SAASC,eAAT,CAAyBC,QAAzB,EAA2CC,YAA3C,EAAiE;AAEtE,MAAIC,UAAiB,GAAGF,QAAQ,GAAG,GAAX,GAAiBC,YAAzC;AAEA,QAAM;AAAEE,IAAAA;AAAF,MAAeZ,SAAS,EAA9B;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAU,EAAV,CAApC;AACA,QAAM;AAAEiB,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,QAAtB;AAAgCC,IAAAA;AAAhC,MAA8CjB,aAAa,EAAjE;AACA,QAAM;AAAEkB,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAejB,UAAU,EAA/B;;AAEA,QAAMkB,SAAS,GAAG,YAAY;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,UAAMC,WAAW,GAAG,MAAMZ,QAAQ,CAAC;AACjCa,MAAAA,UAAU,EAAErB,gBAAgB,CAACsB,GADI;AAEjCC,MAAAA,MAAM,EAAEtB,YAAY,CAACuB,MAFY;AAGjCC,MAAAA,OAAO,EAAE;AAHwB,KAAD,CAAlC;AAKA,UAAMC,QAAQ,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,GAAvB,GAA6BrB,UAA7B,GAA0C,OAA3D;AACA,UAAMsB,cAAc,GAAG,MAAMC,WAAW,CAACV,WAAD,EAAcM,QAAd,CAAxC;AACA,UAAMK,SAAS,GAAG,CAACF,cAAD,EAAiB,GAAGpB,MAApB,CAAlB;AACAC,IAAAA,SAAS,CAACqB,SAAD,CAAT;AACAf,IAAAA,GAAG,CAACb,aAAD,EAAgB6B,IAAI,CAACC,SAAL,CAAeF,SAAS,CAACG,GAAV,CAAcC,CAAC,IAAI;AACnD;AACA;AACA,YAAMC,SAAS,GAAG,EAAE,GAAGD;AAAL,OAAlB;AACA,aAAOC,SAAS,CAACC,MAAjB;AACA,aAAOD,SAAP;AACD,KANiC,CAAf,CAAhB,CAAH;AAOD,GAlBD;;AAoBAzC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM2C,SAAS,GAAG,YAAY;AAE5B;AACApB,MAAAA,OAAO,CAACC,GAAR,CAAYjB,mBAAZ;AAEA,YAAMqC,YAAY,GAAG,MAAMxB,GAAG,CAACZ,aAAD,CAA9B;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAYoB,YAAZ;AACA,YAAM9B,MAAM,GAAI8B,YAAY,GAAGP,IAAI,CAACQ,KAAL,CAAWD,YAAX,CAAH,GAA8B,EAA1D;AACA,UAAIE,cAAuB,GAAG,EAA9B;;AACA,UAAIhC,MAAM,CAACiC,MAAX,EAAmB;AACjB,aAAK,IAAIC,KAAT,IAAkBlC,MAAlB,EAA0B;AACxB,cAAIkC,KAAK,CAACC,QAAN,CAAeC,QAAf,CAAwBtC,UAAxB,KAAuC,CAAEA,UAAU,CAACsC,QAAX,CAAoB,YAApB,CAA7C,EAAiF;AAC/E,kBAAMC,IAAI,GAAG,MAAMjC,QAAQ,CAAC;AAC1BkC,cAAAA,IAAI,EAAEJ,KAAK,CAACC,QADc;AAE1BI,cAAAA,SAAS,EAAE9C,mBAAmB,CAAC+C;AAFL,aAAD,CAA3B;AAIAN,YAAAA,KAAK,CAACN,MAAN,GAAgB,0BAAyBS,IAAI,CAACI,IAAK,EAAnD;AACAT,YAAAA,cAAc,CAACU,IAAf,CAAoBR,KAApB;AACD,WAPD,MAOO,CACL;AACD;;AACDzB,UAAAA,OAAO,CAACC,GAAR,CAAYwB,KAAK,CAACC,QAAlB;AACD;AACF;;AACDlC,MAAAA,SAAS,CAAC+B,cAAD,CAAT;AACD,KAzBD;;AA0BAH,IAAAA,SAAS;AACV,GA5BQ,EA4BN,CAACvB,GAAD,EAAMF,QAAN,EAAgBN,UAAhB,EAA4BU,SAA5B,CA5BM,CAAT;;AA8BA,QAAMa,WAAW,GAAG,OAAOa,KAAP,EAA2BjB,QAA3B,KAAgE;AAClF,UAAM0B,UAAU,GAAG,MAAMtD,cAAc,CAAC6C,KAAK,CAACU,OAAP,CAAvC;AACA,UAAMC,SAAS,GAAG,MAAMxC,SAAS,CAAC;AAChCiC,MAAAA,IAAI,EAAErB,QAD0B;AAEhCwB,MAAAA,IAAI,EAAEE,UAF0B;AAGhCJ,MAAAA,SAAS,EAAE9C,mBAAmB,CAAC+C;AAHC,KAAD,CAAjC,CAFkF,CAOlF;AACA;;AACA,WAAO;AACLL,MAAAA,QAAQ,EAAElB,QADL;AAEL6B,MAAAA,WAAW,EAAEZ,KAAK,CAACU,OAFd;AAGL9C,MAAAA,UAAU,EAAEA;AAHP,KAAP;AAKD,GAdD;;AAiBA,QAAMiD,WAAW,GAAG,MAAOb,KAAP,IAAwB;AAC1C;AACA,UAAMZ,SAAS,GAAGtB,MAAM,CAACgD,MAAP,CAActB,CAAC,IAAIA,CAAC,CAACS,QAAF,KAAeD,KAAK,CAACC,QAAxC,CAAlB,CAF0C,CAI1C;;AACA5B,IAAAA,GAAG,CAACb,aAAD,EAAgB6B,IAAI,CAACC,SAAL,CAAeF,SAAf,CAAhB,CAAH,CAL0C,CAO1C;;AACA,UAAM2B,QAAQ,GAAGf,KAAK,CAACC,QAAN,CAAee,MAAf,CAAsBhB,KAAK,CAACC,QAAN,CAAegB,WAAf,CAA2B,GAA3B,IAAkC,CAAxD,CAAjB;AACA,UAAMjD,UAAU,CAAC;AACfoC,MAAAA,IAAI,EAAEW,QADS;AAEfV,MAAAA,SAAS,EAAE9C,mBAAmB,CAAC+C;AAFhB,KAAD,CAAhB;AAIAvC,IAAAA,SAAS,CAACqB,SAAD,CAAT;AACD,GAdD;;AAgBA,SAAO;AACLyB,IAAAA,WADK;AAEL/C,IAAAA,MAFK;AAGLQ,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nimport { isPlatform } from '@ionic/react';\nimport { CameraResultType, CameraSource, CameraPhoto, Capacitor, FilesystemDirectory } from \"@capacitor/core\";\n\nconst PHOTO_STORAGE = \"photos\";\n\nexport function usePhotoGallery(tripName: string, suitcaseName: string) {\n\n  let identifier:string = tripName + \"_\" + suitcaseName;\n\n  const { getPhoto } = useCamera();\n  const [photos, setPhotos] = useState<Photo[]>([]);\n  const { deleteFile, getUri, readFile, writeFile } = useFilesystem();\n  const { get, set } = useStorage();\n\n  const takePhoto = async () => {\n    console.log(\"here\");\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + \"-\" + identifier + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    setPhotos(newPhotos);\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos.map(p => {\n      // Don't save the base64 representation of the photo data,\n      // since it's already saved on the Filesystem\n      const photoCopy = { ...p };\n      delete photoCopy.base64;\n      return photoCopy;\n    })));\n  };\n\n  useEffect(() => {\n    const loadSaved = async () => {\n\n      // set(PHOTO_STORAGE, \"\");\n      console.log(FilesystemDirectory);\n\n      const photosString = await get(PHOTO_STORAGE);\n      console.log(photosString);\n      const photos = (photosString ? JSON.parse(photosString) : []) as Photo[];\n      let toReturnPhotos: Photo[] = [];\n      if (photos.length) {\n        for (let photo of photos) {\n          if (photo.filepath.includes(identifier) && !(identifier.includes(\"Loading...\"))) {\n            const file = await readFile({\n              path: photo.filepath,\n              directory: FilesystemDirectory.Data\n            });\n            photo.base64 = `data:image/jpeg;base64,${file.data}`;\n            toReturnPhotos.push(photo);\n          } else {\n            // deletePhoto(photo);\n          }\n          console.log(photo.filepath);\n        }\n      }\n      setPhotos(toReturnPhotos);\n    };\n    loadSaved();\n  }, [get, readFile, identifier, takePhoto]);\n  \n  const savePicture = async (photo: CameraPhoto, fileName: string): Promise<Photo> => {\n    const base64Data = await base64FromPath(photo.webPath!);\n    const savedFile = await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    });\n    // Use webPath to display the new image instead of base64 since it's\n    // already loaded into memory\n    return {\n      filepath: fileName,\n      webviewPath: photo.webPath,\n      identifier: identifier,\n    };\n  };\n\n\n  const deletePhoto = async (photo: Photo) => {\n    // Remove this photo from the Photos reference data array\n    const newPhotos = photos.filter(p => p.filepath !== photo.filepath);\n\n    // Update photos array cache by overwriting the existing photo array\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos));\n\n    // delete photo file from filesystem\n    const filename = photo.filepath.substr(photo.filepath.lastIndexOf('/') + 1);\n    await deleteFile({\n      path: filename,\n      directory: FilesystemDirectory.Data\n    });\n    setPhotos(newPhotos);\n  };\n\n  return {\n    deletePhoto,\n    photos,\n    takePhoto\n  };\n}\n\n\nexport interface Photo {\n  filepath: string;\n  webviewPath?: string;\n  base64?: string;\n  identifier: string;\n}"]},"metadata":{},"sourceType":"module"}